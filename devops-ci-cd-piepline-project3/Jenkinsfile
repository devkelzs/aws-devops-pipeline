pipeline {
    agent any

    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub')
        DOCKERHUB_USER = "kellynkwain"
        FRONTEND_IMAGE = "${DOCKERHUB_USER}/kellynkwain-ecommerce-frontend"
        BACKEND_IMAGE = "${DOCKERHUB_USER}/kellynkwain-ecommerce-backend"
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/devkelzs/aws-devops-pipeline.git'
            }
        }

        stage('Frontend Lint') {
            steps {
                dir('devops-ci-cd-piepline-project3/app/frontend') {
                    sh '''
                    npm install
                    npx eslint . --ignore-path .eslintignore || true
                    '''
                }
            }
        }

        stage('Backend Lint') {
            steps {
                dir('devops-ci-cd-piepline-project3/app/backend') {
                    sh '''
                    npm install
                    npx eslint . --ignore-path .eslintignore || true
                    '''
                }
            }
        }

        stage('Backend Test') {
            steps {
                dir('devops-ci-cd-piepline-project3/app/backend') {
                    sh '''
                    npm install
                    npm test || true
                    '''
                }
            }
        }

        stage('Build Frontend Image') {
            steps {
                dir('devops-ci-cd-piepline-project3/app/frontend') {
                    sh 'docker build -t $FRONTEND_IMAGE .'
                }
            }
        }

        stage('Build Backend Image') {
            steps {
                dir('devops-ci-cd-piepline-project3/app/backend') {
                    sh 'docker build -t $BACKEND_IMAGE .'
                }
            }
        }

        stage('Push Images to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                    echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                    docker push $FRONTEND_IMAGE
                    docker push $BACKEND_IMAGE
                    '''
                }
            }
        }

        stage('Update Kubernetes Manifests and Push') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASS')]) {
                    sh '''
                    # Update image in frontend deployment
                    sed -i "s|image: .*kellynkwain-ecommerce-frontend.*|image: $FRONTEND_IMAGE|" kubernetes-k8-manifest/frontend/deployment.yaml

                    # Update image in backend deployment
                    sed -i "s|image: .*kellynkwain-ecommerce-backend.*|image: $BACKEND_IMAGE|" kubernetes-k8-manifest/backend/deployment.yaml

                    # Configure Git user
                    git config --global user.email "nkwainkelly8@gmail.com"
                    git config --global user.name "devkelzs"

                    # Commit and push updated manifests
                    git add kubernetes-k8-manifest/frontend/deployment.yaml kubernetes-k8-manifest/backend/deployment.yaml
                    git commit -m "üîÅ Updated image tags from Jenkins pipeline"
                    git push https://$GIT_USER:$GIT_PASS@github.com/devkelzs/aws-devops-pipeline.git
                    '''
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ CI/CD pipeline succeeded! Code is clean, tested, images pushed, and manifests updated for Argo CD."
        }
        failure {
            echo "‚ùå CI/CD pipeline failed. Check stage logs for more info."
        }
    }
}
